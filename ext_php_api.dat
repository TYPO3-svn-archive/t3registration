a:2:{s:4:"meta";a:3:{s:5:"title";s:0:"";s:5:"descr";s:0:"";s:7:"options";a:2:{s:10:"usageCount";N;s:19:"includeCodeAbstract";N;}}s:5:"files";a:1:{s:14:"MD5_05aaa8f77a";a:4:{s:8:"filename";s:35:"pi1/class.tx_t3registration_pi1.php";s:8:"filesize";i:85012;s:6:"header";a:5:{s:4:"text";s:60:"

Plugin 'Registration' for the 't3registration' extension.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:50:"@author	Federico Bernardin <federico@bernardin.it>";i:1;s:14:"@package	TYPO3";i:2;s:29:"@subpackage	tx_t3registration";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:42:"Federico Bernardin <federico@bernardin.it>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:18:"tx_t3registration ";}}}s:3:"DAT";a:56:{i:1;a:8:{s:6:"header";s:50:"class tx_t3registration_pi1 extends tslib_pibase {";s:5:"class";i:1;s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:5:{s:4:"text";s:60:"

Plugin 'Registration' for the 't3registration' extension.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:50:"@author	Federico Bernardin <federico@bernardin.it>";i:1;s:14:"@package	TYPO3";i:2;s:29:"@subpackage	tx_t3registration";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:42:"Federico Bernardin <federico@bernardin.it>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:18:"tx_t3registration ";}}}s:7:"content";s:0:"";s:12:"content_size";i:1146;s:13:"content_lines";i:48;s:6:"atLine";i:58;}i:3;a:7:{s:6:"header";s:39:"public function main($content, $conf) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:32:"

The main method of the PlugIn
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:28:"$content: The PlugIn content";}i:1;a:2:{i:0;s:5:"array";i:1;s:31:"$conf: The PlugIn configuration";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:32:"that is displayed on the website";}}s:7:"content";s:0:"";s:12:"content_size";i:3932;s:13:"content_lines";i:88;s:6:"atLine";i:114;}i:5;a:6:{s:6:"header";s:34:"private function setEmailFormat(){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:7:"content";s:0:"";s:12:"content_size";i:370;s:13:"content_lines";i:11;s:6:"atLine";i:208;}i:7;a:7:{s:6:"header";s:84:"private function addFunctionReplace($arrayToTraverse,&$parentArray,$parentKey = ''){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:94:"

This function transforms recursively the .add property of javascript into key additionalEval";s:5:"param";a:3:{i:0;a:2:{i:0;s:16:"$arrayToTraverse";i:1;s:17:"array child array";}i:1;a:2:{i:0;s:12:"$parentArray";i:1;s:16:"array root array";}i:2;a:2:{i:0;s:10:"$parentKey";i:1;s:29:"string name of the parent key";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:678;s:13:"content_lines";i:19;s:6:"atLine";i:228;}i:9;a:7:{s:6:"header";s:32:"public function getField($name){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:81:"

This function allow to extract a specific key from private variable $fieldsData";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"$name";i:1;s:31:"string key of array $fieldsData";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:33:"value of $this->fieldsData[$name]";}}s:7:"content";s:0:"";s:12:"content_size";i:98;s:13:"content_lines";i:3;s:6:"atLine";i:254;}i:11;a:7:{s:6:"header";s:24:"private function init(){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:38:"

This function initializes the system";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:464;s:13:"content_lines";i:12;s:6:"atLine";i:263;}i:13;a:7:{s:6:"header";s:32:"private function initFlexform(){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:93:"

This function fetches flex data from flex form plugin and merge data into $this conf array.";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:2804;s:13:"content_lines";i:45;s:6:"atLine";i:281;}i:15;a:7:{s:6:"header";s:46:"private function controlIfUsernameIsCorrect(){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:112:"

This function checks if username contains required and unique, looking for it into alternative username fields";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:14:"string/boolean";i:1;s:50:"if true all ok, otherwise return error description";}}s:7:"content";s:0:"";s:12:"content_size";i:1317;s:13:"content_lines";i:24;s:6:"atLine";i:332;}i:17;a:7:{s:6:"header";s:32:"private function loadTCAField(){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:65:"

This function loads TCA fields array into $this->TCAField array";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:118;s:13:"content_lines";i:5;s:6:"atLine";i:362;}i:19;a:7:{s:6:"header";s:50:"private function mergeTCAFieldWithConfiguration(){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:71:"

This function merges TCA fields with configuration fields
return void";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:611;s:13:"content_lines";i:10;s:6:"atLine";i:374;}i:21;a:7:{s:6:"header";s:47:"private function testUploadFolderField($field){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:89:"

This function checks if upload folder key of config array of specified field is defined";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"$field";i:1;s:31:"array field configuration array";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:32:"false if not set, otherwise true";}}s:7:"content";s:0:"";s:12:"content_size";i:238;s:13:"content_lines";i:9;s:6:"atLine";i:391;}i:23;a:7:{s:6:"header";s:41:"private function argumentsFromUrlCheck(){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:348:"

This function defines the action to do when the page is load. If the user loads the page, the user-confiramtion is done. If the administrator
loads the page, the admin-confirmation is done (it happens in double-optin confirmation mode). If the "action" parameter value in piVars array is
"delete", when the page is load the deletion is confirmed.";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:1229;s:13:"content_lines";i:29;s:6:"atLine";i:408;}i:25;a:7:{s:6:"header";s:27:"private function getForm(){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:59:"

This function manages the render of form or preview infos";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:13:"the form HTML";}}s:7:"content";s:0:"";s:12:"content_size";i:6467;s:13:"content_lines";i:102;s:6:"atLine";i:443;}i:27;a:7:{s:6:"header";s:31:"private function getTemplate(){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:103:"

This function returns the wright template to use. If no content is found, the function returns false.";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:23:"the whole HTML template";}}s:7:"content";s:0:"";s:12:"content_size";i:222;s:13:"content_lines";i:8;s:6:"atLine";i:551;}i:29;a:7:{s:6:"header";s:31:"private function checkErrors(){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:156:"

This function checks every fields errors. Descriptions of found errors are put into $this->errorArray.
return boolean true if one or more errors are found";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}}s:7:"content";s:0:"";s:12:"content_size";i:1130;s:13:"content_lines";i:27;s:6:"atLine";i:566;}i:31;a:6:{s:6:"header";s:54:"private function fileFieldTransform2Array($fieldName){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:7:"content";s:0:"";s:12:"content_size";i:87;s:13:"content_lines";i:3;s:6:"atLine";i:600;}i:33;a:7:{s:6:"header";s:36:"private function checkField($field){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:86:"

This function checks evaluation field types. Then it calls a method (evaluateField).";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"$field";i:1;s:18:"the field to check";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:34:"false if the field contains errors";}}s:7:"content";s:0:"";s:12:"content_size";i:2226;s:13:"content_lines";i:51;s:6:"atLine";i:610;}i:35;a:7:{s:6:"header";s:72:"private function evaluateField($value,$evaluationRule,$field = array()){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:72:"

This function checks if the field respects the evaluation rule passed.";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"$value";i:1;s:18:"the value to check";}i:1;a:2:{i:0;s:15:"$evaluationRule";i:1;s:43:"the evaluation rule used to check the value";}i:2;a:2:{i:0;s:6:"$field";i:1;s:25:"array field configuration";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:47:"true if the field respects the evaluation rule.";}}s:7:"content";s:0:"";s:12:"content_size";i:3381;s:13:"content_lines";i:74;s:6:"atLine";i:670;}i:37;a:7:{s:6:"header";s:61:"private function checkUniqueField($value,$field,$folder = 0){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:80:"

This function checks if the value inserted in the field by the user is unique.";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"$value";i:1;s:18:"the value to check";}i:1;a:2:{i:0;s:6:"$field";i:1;s:23:"the field configuration";}i:2;a:2:{i:0;s:7:"$folder";i:1;s:0:"";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:27:"true if the value is unique";}}s:7:"content";s:0:"";s:12:"content_size";i:894;s:13:"content_lines";i:25;s:6:"atLine";i:753;}i:39;a:7:{s:6:"header";s:44:"private function checkLength($value,$field){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:95:"

This function control if string is greater than config.maxchars and less than config.minchars";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"$value";i:1;s:14:"value to check";}i:1;a:2:{i:0;s:6:"$field";i:1;s:25:"field configuration array";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:41:"true if rule is satisfied otherwise false";}}s:7:"content";s:0:"";s:12:"content_size";i:453;s:13:"content_lines";i:12;s:6:"atLine";i:786;}i:41;a:7:{s:6:"header";s:64:"private function checkFileUploaded($name,$size,$tmpFile,$field){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:63:"

This function checks if the uploaded file is an allowed file.";s:5:"param";a:4:{i:0;a:2:{i:0;s:5:"$name";i:1;s:25:"complete name of the file";}i:1;a:2:{i:0;s:5:"$size";i:1;s:16:"size of the file";}i:2;a:2:{i:0;s:8:"$tmpFile";i:1;s:0:"";}i:3;a:2:{i:0;s:6:"$field";i:1;s:23:"the field configuration";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:26:"the uploaded file features";}}s:7:"content";s:0:"";s:12:"content_size";i:680;s:13:"content_lines";i:15;s:6:"atLine";i:808;}i:43;a:7:{s:6:"header";s:44:"private function checkRequiredField($field){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:42:"

Check if the field is field is required.";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"$field";i:1;s:23:"the field configuration";}}s:6:"return";a:2:{i:0;s:4:"true";i:1;s:60:"if the field is required and the value of the field is empty";}}s:7:"content";s:0:"";s:12:"content_size";i:179;s:13:"content_lines";i:8;s:6:"atLine";i:830;}i:45;a:7:{s:6:"header";s:54:"public function getAndReplaceSubpart($field,$content){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:75:"

This function get and replace the subparts with the corresponding fields.";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"$field";i:1;s:23:"the field configuration";}i:1;a:2:{i:0;s:8:"$content";i:1;s:41:"the html string that contains the markers";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:13:"the html code";}}s:7:"content";s:0:"";s:12:"content_size";i:1730;s:13:"content_lines";i:21;s:6:"atLine";i:846;}i:47;a:7:{s:6:"header";s:38:"private function getAutoField($field){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:101:"

This function return the html code for every field passed according to the specified configuration.";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"$field";i:1;s:23:"the field configuration";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:19:"the html field code";}}s:7:"content";s:0:"";s:12:"content_size";i:2855;s:13:"content_lines";i:43;s:6:"atLine";i:874;}i:49;a:7:{s:6:"header";s:64:"private function getUploadField($field,$value='',$counter = ''){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:18:"

This function...";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"$field";i:1;s:0:"";}i:1;a:2:{i:0;s:6:"$value";i:1;s:0:"";}i:2;a:2:{i:0;s:8:"$counter";i:1;s:0:"";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:19:"the field HTML code";}}s:7:"content";s:0:"";s:12:"content_size";i:1723;s:13:"content_lines";i:28;s:6:"atLine";i:926;}i:51;a:7:{s:6:"header";s:75:"public function getAndReplaceSubpartPreview($field,$content,$contentArray){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:54:"

This function replaces the subparts in preview mode.";s:5:"param";a:3:{i:0;a:2:{i:0;s:6:"$field";i:1;s:23:"the field configuration";}i:1;a:2:{i:0;s:8:"$content";i:1;s:41:"the html string that contains the markers";}i:2;a:2:{i:0;s:13:"$contentArray";i:1;s:0:"";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:27:"the field preview HTML code";}}s:7:"content";s:0:"";s:12:"content_size";i:1906;s:13:"content_lines";i:19;s:6:"atLine";i:963;}i:53;a:7:{s:6:"header";s:50:"private function getErrorSubpart($field,$content){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:5:{s:4:"text";s:125:"

This function gets the error subpart for the passed field and then it replaces the error marker with the error description.";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"$field";i:1;s:23:"the field configuration";}i:1;a:2:{i:0;s:8:"$content";i:1;s:41:"the html string that contains the markers";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:40:"the HTML code with the error description";}s:5:"other";a:1:{i:0;s:16:"@tested 20111017";}s:11:"other_index";a:1:{s:7:"@tested";a:1:{i:0;s:9:"20111017 ";}}}s:7:"content";s:0:"";s:12:"content_size";i:1412;s:13:"content_lines";i:20;s:6:"atLine";i:991;}i:55;a:7:{s:6:"header";s:37:"private function emailDeletionSent(){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:206:"

This function prepares the email to send user for deleting and create the auth code for authenticate the confirmation
Extract the "T3REGISTRATION_DELETE_SENTEMAIL" marker subpart and create the email body";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:36:"the registration final HTML template";}}s:7:"content";s:0:"";s:12:"content_size";i:1534;s:13:"content_lines";i:25;s:6:"atLine";i:1018;}i:57;a:7:{s:6:"header";s:35:"private function endRegistration(){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:43:"

This function call the insertUser method.";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:36:"the registration final HTML template";}}s:7:"content";s:0:"";s:12:"content_size";i:1104;s:13:"content_lines";i:19;s:6:"atLine";i:1049;}i:59;a:7:{s:6:"header";s:30:"private function insertUser(){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:226:"

This method insert user in fe_users database table. If automatic password generation is set to true and no password is set by the user, a new
password is automatically generated. It also calls the methods for sending emails.";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:2676;s:13:"content_lines";i:54;s:6:"atLine";i:1075;}i:61;a:7:{s:6:"header";s:37:"private function updateUserProfile(){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:226:"

This method insert user in fe_users database table. If automatic password generation is set to true and no password is set by the user, a new
password is automatically generated. It also calls the methods for sending emails.";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:1327;s:13:"content_lines";i:26;s:6:"atLine";i:1136;}i:63;a:7:{s:6:"header";s:31:"private function getUsername(){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:112:"

This function returns the username. If no one is specified by the user, it automatically generates a username.";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:8:"username";}}s:7:"content";s:0:"";s:12:"content_size";i:270;s:13:"content_lines";i:8;s:6:"atLine";i:1168;}i:65;a:7:{s:6:"header";s:36:"private function setAuthCode($user){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:18:"

This function...";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"$user";i:1;s:0:"";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:4:"user";}}s:7:"content";s:0:"";s:12:"content_size";i:801;s:13:"content_lines";i:19;s:6:"atLine";i:1183;}i:67;a:7:{s:6:"header";s:59:"private function prepareAndSendEmailSubpart($action,$user){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:74:"

This function calls the methods for preparing and for sending the email.";s:5:"param";a:2:{i:0;a:2:{i:0;s:7:"$action";i:1;s:116:"the action to be performed. Possible values can be "deleteRequest", "confirmationRequest" or "authorizationRequest".";}i:1;a:2:{i:0;s:5:"$user";i:1;s:28:"the target user of the email";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:513;s:13:"content_lines";i:15;s:6:"atLine";i:1210;}i:69;a:7:{s:6:"header";s:38:"private function changeProfileCheck(){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:59:"

This function cheks if you're into change profile process";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:43:"true if user is in profile, false otherwise";}}s:7:"content";s:0:"";s:12:"content_size";i:220;s:13:"content_lines";i:8;s:6:"atLine";i:1231;}i:71;a:7:{s:6:"header";s:31:"private function showProfile(){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:133:"

This function is called before getForm if user is logged, so it merge data from database into piVars, only if form is not submitted";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:18:"the form HTML code";}}s:7:"content";s:0:"";s:12:"content_size";i:1223;s:13:"content_lines";i:24;s:6:"atLine";i:1245;}i:73;a:7:{s:6:"header";s:35:"private function showOnAutoLogin(){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:2:"

";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:12:"unknown_type";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:881;s:13:"content_lines";i:17;s:6:"atLine";i:1273;}i:75;a:7:{s:6:"header";s:39:"private function confirmUserDeletion(){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:132:"

This function checks if the user can be confirmed and it calls the method updateConfirmedUser for updating the user into database.";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:62:"true if the user was been correctly confirmed, false otherwise";}}s:7:"content";s:0:"";s:12:"content_size";i:1142;s:13:"content_lines";i:21;s:6:"atLine";i:1296;}i:77;a:7:{s:6:"header";s:35:"private function deleteUser($user){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:41:"

This function delete user from database";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:10:"$user: ...";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:62:"true if the user was been correctly confirmed, false otherwise";}}s:7:"content";s:0:"";s:12:"content_size";i:1236;s:13:"content_lines";i:25;s:6:"atLine";i:1324;}i:79;a:7:{s:6:"header";s:46:"private function confirmationProcessControl(){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:2:"

";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:12:"unknown_type";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:2290;s:13:"content_lines";i:43;s:6:"atLine";i:1353;}i:81;a:7:{s:6:"header";s:36:"private function confirmUser($user){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:132:"

This function checks if the user can be confirmed and it calls the method updateConfirmedUser for updating the user into database.";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:10:"$user: ...";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:62:"true if the user was been correctly confirmed, false otherwise";}}s:7:"content";s:0:"";s:12:"content_size";i:746;s:13:"content_lines";i:13;s:6:"atLine";i:1403;}i:83;a:7:{s:6:"header";s:44:"private function updateConfirmedUser($user){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:91:"

This function confirms the user by updating the user record into fe_users database table.";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"$user";i:1;s:0:"";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:1881;s:13:"content_lines";i:43;s:6:"atLine";i:1423;}i:85;a:7:{s:6:"header";s:39:"private function authorizedUser($user){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:139:"

This function checks if the user can be authorized and it calls the method updateAdminAuthorizedUser for updating the user into database.";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"[type]";i:1;s:10:"$user: ...";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:62:"true if the user was been correctly confirmed, false otherwise";}}s:7:"content";s:0:"";s:12:"content_size";i:629;s:13:"content_lines";i:11;s:6:"atLine";i:1473;}i:87;a:7:{s:6:"header";s:50:"private function updateAdminAuthorizedUser($user){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:90:"

This function authorizes user by upadating the user record into fe_users database table.";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"$user";i:1;s:25:"the user to be authorized";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:1405;s:13:"content_lines";i:28;s:6:"atLine";i:1491;}i:89;a:7:{s:6:"header";s:33:"private function autoLogin($uid){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:52:"

This function makes auto login form confirmed user";s:5:"param";a:1:{i:0;a:2:{i:0;s:4:"$uid";i:1;s:20:"id of confirmed user";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:1083;s:13:"content_lines";i:22;s:6:"atLine";i:1526;}i:91;a:7:{s:6:"header";s:34:"private function showDeleteLink(){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:38:"

This function shows the delete link.";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:18:"the link HTML code";}}s:7:"content";s:0:"";s:12:"content_size";i:921;s:13:"content_lines";i:21;s:6:"atLine";i:1554;}i:93;a:8:{s:6:"header";s:36:"private function deleteEmail($user){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:11:"sectionText";a:0:{}s:4:"cDat";a:3:{s:4:"text";s:57:"

This function prepares the user deletion email message.";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"$user";i:1;s:28:"the target user of the email";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:45:"the type and the HTML content of the message.";}}s:7:"content";s:0:"";s:12:"content_size";i:1534;s:13:"content_lines";i:23;s:6:"atLine";i:1582;}i:95;a:7:{s:6:"header";s:53:"private function sendAdviceAfterAuthorization($user){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:84:"

This function prepares email message to advice the user about admin authorization.";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"$user";i:1;s:28:"the target user of the email";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:45:"the type and the HTML content of the message.";}}s:7:"content";s:0:"";s:12:"content_size";i:903;s:13:"content_lines";i:14;s:6:"atLine";i:1612;}i:97;a:7:{s:6:"header";s:42:"private function confirmationEmail($user){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:61:"

This function prepares the user confirmation email message.";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"$user";i:1;s:28:"the target user of the email";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:45:"the type and the HTML content of the message.";}}s:7:"content";s:0:"";s:12:"content_size";i:1497;s:13:"content_lines";i:22;s:6:"atLine";i:1633;}i:99;a:7:{s:6:"header";s:43:"private function authorizationEmail($user){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:70:"

This function prepares the administrator confirmation email message.";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"$user";i:1;s:28:"the target user of the email";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:45:"the type and the HTML content of the message.";}}s:7:"content";s:0:"";s:12:"content_size";i:1616;s:13:"content_lines";i:23;s:6:"atLine";i:1662;}i:101;a:7:{s:6:"header";s:85:"private function prepareEmailContent($subpartHTMLMarker,$subpartTextMarker,$markers){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:70:"

This function prepare the email content based on value from flexform";s:5:"param";a:3:{i:0;a:2:{i:0;s:18:"$subpartHTMLMarker";i:1;s:22:"string for HTML marker";}i:1;a:2:{i:0;s:18:"$subpartTextMarker";i:1;s:22:"string for Text marker";}i:2;a:2:{i:0;s:8:"$markers";i:1;s:29:"array of marker to substitute";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:32:"with content HTML and text parts";}}s:7:"content";s:0:"";s:12:"content_size";i:607;s:13:"content_lines";i:13;s:6:"atLine";i:1694;}i:103;a:7:{s:6:"header";s:52:"private function sendEmail($message,$user,$subject){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:97:"

This function prepares and sends the email. It can be sent to the user or to the administrator.";s:5:"param";a:3:{i:0;a:2:{i:0;s:8:"$message";i:1;s:32:"the message content of the email";}i:1;a:2:{i:0;s:5:"$user";i:1;s:28:"the target user of the email";}i:2;a:2:{i:0;s:6:"[type]";i:1;s:13:"$subject: ...";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:1991;s:13:"content_lines";i:51;s:6:"atLine";i:1716;}i:105;a:7:{s:6:"header";s:50:"private function removeDotFromArray($sourceArray){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:58:"

This function remove dots from keys of the passed array.";s:5:"param";a:1:{i:0;a:2:{i:0;s:12:"$sourceArray";i:1;s:24:"the array to be modified";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:478;s:13:"content_lines";i:15;s:6:"atLine";i:1774;}i:107;a:7:{s:6:"header";s:51:"private function getSelectOptionFromConfig($field){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:2:"

";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"$field";i:1;s:0:"";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:12;s:13:"content_lines";i:3;s:6:"atLine";i:1794;}i:109;a:4:{s:6:"header";s:40:"private function htmlentities($string) {";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:74:"

This function execute the replacing of html entities with UTF-8 encoding";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"$string";i:1;s:0:"";}}s:6:"return";a:2:{i:0;s:12:"unknown_type";i:1;s:0:"";}}s:6:"atLine";i:1804;}i:111;a:7:{s:6:"header";s:44:"private function removeAllMarkers($content){";s:11:"parentClass";s:21:"tx_t3registration_pi1";s:4:"cDat";a:3:{s:4:"text";s:72:"

Function to removes all marker into the template after replace process";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:27:"$content content to replace";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:15:"content cleared";}}s:7:"content";s:0:"";s:12:"content_size";i:1112;s:13:"content_lines";i:29;s:6:"atLine";i:1820;}}}}}